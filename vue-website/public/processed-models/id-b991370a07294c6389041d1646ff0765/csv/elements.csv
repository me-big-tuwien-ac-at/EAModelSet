"ID","Type","Name","Documentation","Specialization"
"id-b991370a07294c6389041d1646ff0765","ArchimateModel","LCDBORM","",""
"id-4ad040413cec48f4b805da5f044bec8e","Capability","Additional customisation","Further customisation is achieved using procedural code using programming languages such as HTML, CSS, JavaScript, Java, C# and Python and others.",""
"id-0c6c0fee7a01442180844738f128293a","Capability","Automation","Automation of low-code platforms is present throughout the whole lifecycle and can take care of the following:
-) Generate applications automatically (for example, from spreadsheets)
-) Take care of low-level architectural details
-) Deal with such technical aspects as authentication, load balancing, consistency of business logic, integrity and security of the data, microservice creation, orchestration, and management
-) Convert applications interface from design tools (for example, Figma, InVision) to a low-code platform
-) Test case generations and configurations (using such mechanisms as “record and play”, UI testing frameworks and others). It can be done using inbuilt features or external tools
-) Transform an artefact into executable representation and generate code
-) Deploy application
-) Scale and tune performance depending on the number of users
",""
"id-e75713849ff04e9daf9ef0efb687e8dd","Capability","Citizen development empowerment","Citizen developers are empowered to build apps quickly and are involved in other software development lifecycle phases. Moreover, their knowledge of business promotes that needs are addressed precisely",""
"id-ab13c110536c46ff8ca8c1a7f5e69439","Capability","Fusion team empowerment","-) A group that merges business, analytics and technology professionals. The team typically includes people with knowledge and experience in various company areas.
-) Citizen developers are empowered to build apps quickly and are involved in other software development lifecycle phases. Moreover, their knowledge of business promotes that needs are addressed precisely.
-) IT professionals deliver invaluable expertise in various software development aspects (for example, security, risks and others) and are pivotal in delivering more advanced cases. They also ensure addressing non-functional and quality challenges.
-) Architects and IT leaders are in charge of low-code development platforms selection, adoption, configuration and customisation.
-) The fusion teams follow the test-and-learn approach.
-) Teams also ensure that citizen developers can proactively turn for advice to more experienced colleagues
",""
"id-c840864d572a4ec0912ee4d74376b79a","Capability","Iterative low-code development methodology","-) Any methodology can be used for low-code development. Nevertheless, the methodology’s key characteristics are iterative manner, regular releases, prototype or minimum viable product creation, incrementally growing product, and validation with a customer.
-) Typically development process consists of multiple phases, and steps cover requirements analysis, planning, design, development, testing, deployment and maintenance activities
-) Current sources describe low-code development in use with concepts of Agile (Scrum, Kanban, Extreme Programming, Lean, DevOps) or Rapid Application Development methodologies. The thesis has amalgamated all these findings and proposes a low-code development lifecycle for ideation realisation (see business layer) 
-) Feedback gathering and refinement should be done in a continuous manner through quick iterations
",""
"id-006b4cdcc23f4696ab3b5c8837d75bdb","Capability","Knowledge gap identification","",""
"id-72ae7cce185d4ba28733196d7392153e","Capability","Low-code development governance","Sources suggest:
1) forming a team with IT and business experts to establish a foundation of governance policies, answering questions like “what are low-code use cases”, “who should access the platform”, “what training is needed”, and others,
2) it is necessary to decide on the required skills level for low-code development, 
3) establish “sandbox” and staging environments,
4) consider governance implementation possibilities within the platform",""
"id-c1a7c58c6e0a4d25a48d0f9cb8731243","Capability","Low-code development platforms utilisation","Low-code development platform combines various traditional development components in a single environment and takes a major role in low-code development. Therefore, users of the platforms should be knowledgeable about utilising the features offered by the platform and release their full potential.",""
"id-b4b388066e7b432fab98cc91c6a09182","Capability","Low-code development training","Companies in practice to increase the competence of citizen developers typically organise on-site and off-site training or classes and offer mentoring with close work of IT teams. Additionally, it is suggested implementing formalised learning environment for knowledge testing and verification and creating a portfolio of essential courses, certifications and lessons learned from previous projects.",""
"id-4cc4248ccd91460ab1fd0128fbbbff90","Capability","Open IT - Business communication","-) The low-code code nature of visual and quick development works well, as such visual representation can improve communication
-) Low-code development can deal with even daily requirements change to provide a functional solution to accommodate clients’ needs and deliver a solution that meets their expectations",""
"id-4e21f7f4b28a4ea2bafe543b54b71112","Capability","Platforms comprehension","Users should explore platform facilities and development environments that make the use of the platform easy. The understanding of creating integration with external services and various data sources using inbuilt connectors should be gained. It should be discovered how to extend the integration possibilities by setting up custom connectors. Finally, the work principles of workflow definitions should be clear.
Users should familiarise themselves with the use of lifecycle management and collaboration facilities, requirement management tools, component libraries, and repositories. Inbuilt testing facilities, their principles and the potential integration of external testing tools should be explored. Capabilities of cloud and on-premise deployment, as well as maintenance features, should be revealed.",""
"id-a907c21fc2604745b44fa300f13ca38c","Capability","Platforms selection evaluation","While most low-code platforms can be considered general-purpose platforms that support various use cases, there are also specific platforms for process apps, database-related segments, request handling, mobile development and even IoT. Consequently, when selecting the platform, there are following suggestions in the literature:
-) Use feature lists to facilitate comparison and selection
-) Apply the intended scenarios and recognise the organisation’s needs for platform selection
-) Consider the vendor lock-in aspect.",""
"id-6dce8f0262234a09b353671354a72062","Capability","Reusability features","Reuse principles are supported for various components, from data model setup to UI elements and definition. Also, during testing, reusability is supported in the form of reusable test data and cases. In addition, platforms provide repositories and take care of version control.",""
"id-ad214f36c2c44489bc309649a1cbaee8","Capability","Test-and-learn","-) People are open to generate ideas, and their requirements (even if there is only perception about relevant features), build a minimum viable product, test in real-life scenarios, obtain feedback and decide on further continuation. 
-) Organisation supports funding for such experimentation, with the understanding of project uncertainty and that the outcome may also be unsuccessful",""
"id-cb30d493329b4b29a6ceb5e1a6f0c7fd","Capability","Utilidation of predefined blocks","Predefined components, elements and templates exclude the need to create them from the beginning or customise them every single time and thus reducing the time spent. In addition, settings configurations are also predefined.
Provided mechanisms are non-professional developers-friendly and include assistance facilities (for example, recommender systems) to support them in development.",""
"id-1372c9db886f4624af432433103d4a43","Capability","Visual application development","Platforms provide visual application development tools for the interface, data model, business logic, control and data flow, APIs, integration and security model. Developers are provided with a visual environment enabling application specification through offered components and elements using visual modelling, drag-and-drop and abstraction approaches. Although some insignificant manual coding might be needed, for example, for configuration, the reduction of extensive manual hand-coding results in an increased pace of application delivery.
Maintenance, deployment and other functionality, including scalability and extensibility mechanisms, are provided through an easy-to-use visual environment, thus reducing routine tasks and the effort for maintenance.
Provided mechanisms are non-professional developers-friendly and include assistance facilities (for example, recommender systems) to support them in development.",""
"id-d01c5bd303de478b8f463d4909a2e4c5","Resource","Citizen developers","Developers from the business side with various backgrounds. Commonly power users, developers working within departments other than IT, outside consultants or line-of-business employees ",""
"id-2e97487b19f240a69079d66dbe010008","Resource","Comparison feature list","Use feature lists to facilitate comparison and selection",""
"id-82524c933ad84050abeda90dd341e6c7","Resource","Funding model","Organisation supports funding for such experimentation, with the understanding of project uncertainty and that the outcome may also be unsuccessful",""
"id-9a482520f547493da8a31ae54b072958","Resource","Fusion team","-) The team might include developers (experienced and low-code/citizen developers that understand the business need and can turn it into an application), business leaders and owners (experts in product, business processes and customer experiences), IT administrators (governance, compliance and maintenance leaders), architects (provides technical guidance and leadership in the context of the overall picture) and others (product owners, team leaders, testers, trainers UX designers).
-) The team follows the test-and-learn approach.
-) The team ensures that citizen developers can proactively turn for advice to more experienced colleagues ",""
"id-edcd94551bf143be9662b8aa3be1162e","Resource","Governance policies","See related capability",""
"id-7719377ad3c9488c8b58f41e986eb785","Resource","IT - Business collaboration and communication approach","",""
"id-7fa10bfcd4db4962ae6377f52418e566","Resource","Learning environment","See related capability",""
"id-5d4f760ea87745aab86533ddfe39b2ae","Resource","Low-code development platform","Low-code development is a tool-based approach. Low-code code development platforms can help any enterprise, especially those with limited IT resources and budget, scale organisation at optimum cost and quickly deliver products with rich features. 
Low-code development platform combines various traditional development components in a single environment and takes a major role in low-code development.",""
"id-37721eb257074e908606a0493a5516fa","Resource","Mentoring","See related capability",""
"id-dd1096a75d6649eba1b2f6f1648bd554","Resource","On-/Off-site training sessions","See related capability",""
"id-1a9a9b9f0ac54e4bb931ed8f5aebaf52","Resource","Portfolio of courses and certifications","See related capability",""
"id-6a28dfae741a476da397e1f368904b42","Resource","Portfolio of lessons learned","See related capability",""
"id-663d2194db2f4b9cb19ddfa13ac5df2f","Resource","Test-and-learn culture","People are open to generate ideas, and their requirements (even if there is only perception about relevant features), build a minimum viable product, test in real-life scenarios, obtain feedback and decide on further continuation. ",""
"id-842b2ee0b33f4fd2aea1373c00f58f36","Resource","Use case scenarios","Apply the intended scenarios and recognise the organisation’s needs for platform selection ",""
"id-c3b6ca85539c44f1a5779e3dd8b754be","Resource","Vendor lock-in evaluation skills","Suggestions to reduce lock-in risk:
-) Evaluate the low-code platform’s licencing models’ impact on the organisation’s vision in a long-term perspective (3 to 5+ years). Evaluate the amount and type of users and use cases.
-) Apply principles of loosely coupled architecture.
-) Minimise customisations requiring extensive custom coding in the platforms. Instead, it is suggested to use extensions that can be integrated using API mechanisms.",""
"id-bfbc46d7629548e58b3dbcb38ed26dd3","BusinessActor","Architect","Architects provide technical guidance and leadership in the context of the overall picture",""
"id-4bfb3c5dac8545bcba9fc8b2ed2f3b7d","BusinessActor","Business leader","Business leader",""
"id-248cbb3ddc404d068dc5634e335d4915","BusinessActor","Business owner","Business owner",""
"id-11799c8ba1a84387aaff0f58468b50d0","BusinessActor","Developer","IT professionals that deliver invaluable expertise in various software development aspects (for example, security, risks and others) and are pivotal in delivering more advanced cases.",""
"id-39c89bef2f954954944e1b5ed4dc20a6","BusinessActor","Digital product owner","Digital product owner",""
"id-a2c20dae97a64d2eb9447aa28773cf19","BusinessActor","IT administrator","IT administrators - governance, compliance and maintenance leaders",""
"id-81e322dc9560420f94e911ccf434fadc","BusinessActor","Line-of-business developer","Line-of-business developer",""
"id-1beb03b704c44338be2fda17c48addcc","BusinessActor","Line-of-business employee","Line-of-business employee",""
"id-8cbcca95e66742319243ce9c6aa0274c","BusinessActor","Team leader","Team leader",""
"id-8716e97c694841c8a7f56c54fc649f12","BusinessActor","Tester","Tester",""
"id-c98555a499d049b8b94278bc8195bbe5","BusinessActor","Trainer","Trainer",""
"id-4ccce7628b7f48658b0c60aac056fadb","BusinessActor","UX designer","UX designer",""
"id-a60102a139a1478096bf0ce7108f776d","BusinessCollaboration","Fusion Team","Low-code development is assigned to the fusion team.
The team might include various actors and roles. It should be noted that organisations should not definitely include all of these roles, but the model depicts possible members. The idea in the model is that a fusion team is collaborating already from the initial state of the development, thus ensuring business and development knowledge, competencies and skills along all development steps and mitigating possible risks related to limited citizen-developers knowledge",""
"id-12ec6f5bad8b4dc09035934d90706ae6","BusinessEvent","Business need","The development process is initiated based on an internal business need, requirement or idea.",""
"id-3feef52814834ba2872dcdd569654f79","BusinessEvent","Market demand","The development process is initiated based on market needs or opportunities.",""
"id-e39fe149231b41b69e1687c1fd08c2ed","BusinessEvent","Strategic demand","The development process is initiated based on initiatives that adhere to business strategy.",""
"id-19560c956ecc4745836ca74d9462d1cb","BusinessObject","Evaluation criteria of vendor lock-in","In the blog (Alexander Forsyth, 2022) referencing to presentation “How to Mitigate Vendor Lock-In, Technical Debt, and Security Risks of Low-Code Development”  by Wong J. from Gartner Inc.  suggestions to reduce lock-in is descibed:
-) Evaluate the low-code platform’s licencing models’ impact on the organisation’s vision in a long-term perspective (3 to 5+ years). Evaluate the amount and type of users and use cases.
-) Apply principles of loosely coupled architecture.
-) Minimise customisations requiring extensive custom coding in the platforms. Instead, it is suggested to use extensions that can be integrated using API mechanisms.
",""
"id-3b34eb3b67e34f2890272a3081fdd1c7","BusinessObject","Feature list","Presented in the thesis or in (Bock & Frank, 2021a; Ihirwe et al., 2020; Oteyo et al., 2021; Sahay et al., 2020).",""
"id-e1a29f692b444a5db0d74d14c6c61f00","BusinessObject","Governance","See related resource and capability",""
"id-339773618f8947f9b61babbddcc17b4c","BusinessObject","Project portfolio","See related resource and capability",""
"id-f9637f0b69294879906f928d80a1615a","BusinessObject","Use case scenarios","Apply the intended scenarios and recognise the organisation’s needs for platform selection ",""
"id-e92d653549bf4acf913e877e2d69dbc0","BusinessProcess","Deployment","The application is deployed either on-cloud or locally",""
"id-e858ecd4c61440beaa4dd6b3fbb6c687","BusinessProcess","Designing","Based on the defined requirement, the design is specified and reviewed by stakeholders considering architecture, modularity and extensibility ",""
"id-bad85c0d035242b3bc411699c0334b33","BusinessProcess","Development","The application is being developed using low-code platform features specifying user interface, business logic, integration and others ",""
"id-403a91523432498c9cf386735b27a964","BusinessProcess","Ideation and requirement analysis","Ideation of the product and identificatio of  users’ requirements regarding the developed software",""
"id-94bc1dea3bb8473eae1898e5979e3166","BusinessProcess","Low-code development","Three triggers can initiate the low-code development lifecycle:
1. Strategic demand. 
2. Business need. 
3. Market demand. 
The process consists of seven finer-grained, low-code development lifecycle phases, which match Agile development lifecycle phases and are executed iteratively: ideation and requirement analysis, planning, application design, development, testing, deployment and maintenance.
Low-code development is assigned to the fusion team.",""
"id-bc6ce016fedc4d4ba27abb23cabd943a","BusinessProcess","Maintenance","Maintenance is started once the application is released, and if functionality should be extended, additional features can be added, or a new iteration can be initiated ",""
"id-2121c3acb78a4286bcbb79e7a1998ba3","BusinessProcess","Planning","Perform analysis and planning of feasibility, schedule, interdependences, risks and complexities ",""
"id-7c1b7c4d05384404a53fa23077fdc440","BusinessProcess","Testing","Perform tests to verify the implementation of requirements within the software ",""
"id-95a56b09e4bd4e0a9181848464047ad1","BusinessRole","Business stakeholder","Business leaders and owners (experts in product, business processes and customer experiences)",""
"id-5513fd82eef543938780fee7caeca38e","BusinessRole","Citizen developer","People (typically “business end-users”) with minimal or without software engineering experience.
Developers that understand the business need and can turn it into an application.
Citizen developers are empowered to build apps quickly and are involved in other software development lifecycle phases. Moreover, their knowledge of business promotes that needs are addressed precisely",""
"id-8db2ffa089374b809239bd91586c2103","ApplicationComponent","Low-code development platform","Platforms that include application development, deployment, lifecycle and platform management features. These platforms are cloud- (delivered through Platform-as-a-Service (PaaS) model) or on-premise-based, on which low-code development is accomplished using visual tools, predefined components, and their customisation and configuration",""
"id-c40310744624444a87e64ad46305fedb","ApplicationFunction","Analysis features","Analysis environment allows to perform different checks of developed solutions:
• Analysis Features – dashboards, monitors, alarms and other performance and measurement tools to gather statistics, identify code anti-patterns, analyse the performance and monitor CPU, memory and others (Fernandes et al., 2021; Ihirwe et al., 2020; Rafi et al., 2022).
•  Advanced Reporting – a feature which enables application usage reporting in a tabular and graphical way (Sahay, Indamutsa, et al., 2020).
",""
"id-6816e5fbbc004a7b89f7e9833d1e1e2b","ApplicationFunction","Artificial intelligence support","Artificial intelligence features expose platforms possibility of using AI services:
• Internal artificial intelligence components – a feature that enables internal components for the use of AI (Arora et al., 2020; Bock & Frank, 2021a).
•  Integrability of external artificial intelligence services – a feature that enables the use of specialised APIs for AI services (Bock & Frank, 2021a).
",""
"id-52ff6a4588304b5da46449c6f931a882","ApplicationFunction","Business logic specification","Business logic specification mechanisms enable the specification of applications’ business logic:
• Business rules engine – this feature allows for establishing the logic and executing business rules helping to manage data according to requirements (Di Ruscio et al., 2022; Sahay, Indamutsa, et al., 2020).
•  Graphical workflow editor – this feature enables business rule specification in a visual-based manner (Sahay, Indamutsa, et al., 2020). Workflows are defined in a graphical manner using similar diagrams as business process modelling notation (Sanchis et al., 2020).
•  AI-enabled business logic – a feature which is learning attributes behaviour and replicates it conforming to artificial intelligence-based learning mechanisms (Sahay, Indamutsa, et al., 2020).
",""
"id-b5f8a73fd29e41c09614ce1985d5de3f","ApplicationFunction","Collaborative development support","Collaborative development support mechanisms provide the collaborative specification of applications. There are two possible models:
• Online collaboration – multiple developers work and collaborate on the same application simultaneously, and conflicts are managed at runtime (Sahay, Indamutsa, et al., 2020).
•  Offline collaboration – multiple developers work in offline mode locally and then commit changes to the server in which changes are merged (Sahay, Indamutsa, et al., 2020).
",""
"id-1396085488474f0ab3bddbc3e97bdcd6","ApplicationFunction","Data source specification","Data source specification mechanisms include features related to data-related aspects:
• Data structure specification – a component that enables data structure specification using a conceptual modelling tool (Bock & Frank, 2021b).
• Internal databases – a feature that allows data to be stored in the internal database (Bock & Frank, 2021a). The use of external data sources is covered in interoperability features.
• External data sources – capacity to access external data sources. For that, various mechanisms can be used, for example, API, which is covered under Interoperability features (Bock & Frank, 2021a).
• Data binding – feature for data binding mechanisms (Arora et al., 2020).",""
"id-ec1949e4d37a4a298f355adcc54fbda3","ApplicationFunction","Deployment support","Deployment support features provide mechanisms for the deployment of developed applications: 
• Automatic deployment support – a tool to automate the deployment of the application (Rafi et al., 2022).
•  Deployment on a cloud – a feature that enables applications deployment on a cloud infrastructure (Sahay, Indamutsa, et al., 2020)
•  Deployment on local infrastructures – a feature that enables local applications deployment on an organisation’s infrastructure (Sahay, Indamutsa, et al., 2020).
",""
"id-c0205188b58944df989a80075a5fa1f5","ApplicationFunction","Developers assistance","Mechanisms (for example, recommender systems) that cloud assist developers in the development process (Almonte et al., 2020; Bucaioni et al., 2022)",""
"id-70b0ddbb65c94561b799084dad802040","ApplicationFunction","Development automation","Development automation features include such mechanisms as:
• Automatic development – a feature that enables the automatic generation of applications (for example, automatically generating an application from a spreadsheet) (Khorram et al., 2020; Waszkowski, 2019).
•  Automation of low-level details – this feature, through automation, helps developers to reduce concerns regarding low-level concerns (for example, object-relational mappers, load balance, data integrity, query optimisation, services, messaging, authentication and others) (Di Ruscio et al., 2022; Sahay, Indamutsa, et al., 2020).
",""
"id-0ecc20693b494f99932597bb83be0053","ApplicationFunction","Extensibility support","The group of extensibility features involves:
• Easy to add modelling features – mechanisms to add new features (Ihirwe et al., 2020) 
•  Easy to modify the existing features – mechanisms to refine or extend developed functionality (Ihirwe et al., 2020; Luo et al., 2021)
",""
"id-c872121f50d44c9c82425b67eef71899","ApplicationFunction","Interoperability support","An interoperability support features are related to connection to various external data sources and interaction with different external services:
• Connection with data sources – a feature that supports the connection of application to various data sources – relational databases, non-relational databases or files (Bock & Frank, 2021a; Sahay, Indamutsa, et al., 2020).
• Interoperability with external services – this feature provides functionality to incorporate various external services, commonly through API (for example, web services, RESTful and others) (Bock & Frank, 2021a; Sahay, Indamutsa, et al., 2020).",""
"id-75a6ae95d61f47e2b981aa04098c2bc3","ApplicationFunction","Lifecycle management","Lifecycle-management features include the following facilities: 
• Repositories – a feature that supports repository and version control tasks of developed artefacts (Sahay, Indamutsa, et al., 2020).
•  Lifecycle-management features – features that enhance collaborative work employing task, document, and requirement management as well as deployment, staging, maintaining and other functionalities. Integration with external tools is also possible (al Alamin et al., 2021; Almonte et al., 2020; Gurcan & Taentzer, 2021; Sahay, Indamutsa, et al., 2020).
",""
"id-d6d9342653c849aea82809c8752ebe92","ApplicationFunction","Requirements modelling","Requirement modelling support features cover the availability of inbuilt functionality of requirements specification. Low-code development platforms usually provide tools for requirements management with data collection, checklist creation, user stories and their import into sprint plans and other functionalities. Such a feature is relevant within the development to follow for requirements correct implementation as well as requirements traceability and verification (al Alamin et al., 2021; Ihirwe et al., 2020).",""
"id-9da24b80ea644860923f14d7b939913d","ApplicationFunction","Reusability ","Reusability support is a set of mechanisms that enables the reuse of inbuilt or already developed artefacts (Sahay, Indamutsa, et al., 2020). Included mechanisms are:
• Predefined components and predefined templates – pre-built components (various pallets of widgets, structures, models, services, connectors and other components) and templates that are available for the development of applications (Krishnaraj et al., 2022; Martins et al., 2020; Pacheco et al., 2021; Saay & Margaria, 2020; Sahay, Indamutsa, et al., 2020).
• Predefined configuration – a feature allowing to utilise of the predefined configuration of settings and solutions (Khorram et al., 2020; Rafi et al., 2022).
• Built-in workflows – a feature that provides a platform with predefined common reusable workflows that can be used for application development (Sahay, Indamutsa, et al., 2020).
• Pre-built forms/reports/dashboards – reusable set of common forms, reports or dashboards available for editing and use in development (Arora et al., 2020; Sahay, Indamutsa, et al., 2020).
• Artefacts export mechanisms – mechanisms to export created models or generated artefacts for future reuse (Ihirwe et al., 2020)
• Artefacts import mechanisms – feature to import and reuse previously created or other external artefacts (Ihirwe et al., 2020).
• Artefacts storage and future reuse – feature for management of reusable artefacts locally or in cloud infrastructure (Ihirwe et al., 2020).
",""
"id-d45bb9e22c3f44ddb9f39b028d7a6d94","ApplicationFunction","Scalability support","Scalability features provide developers with means to scale the application:
• Scalability on the number of users – features to scale applications regarding the number of manageable active users (Sahay, Indamutsa, et al., 2020).
•  Scalability on data traffic – features to scale applications regarding the data traffic (Sahay, Indamutsa, et al., 2020).
•  Scalability of data storage – features to scale applications regarding data storage (Sahay, Indamutsa, et al., 2020).
",""
"id-e008c6cf39c64284805c69aac8dc9315","ApplicationFunction","Security support","Features related to security aspects are grouped into the security support features group: 
• Application security – a feature that enables such applications security mechanisms as confidentiality, integrity and availability through authentication mechanisms, security protocols and user access control (Sahay, Indamutsa, et al., 2020).
•  Platform security – a feature that enables security and role management to ensure confidentiality, integrity and availability on a platform level (Sahay, Indamutsa, et al., 2020).
",""
"id-1c7f551298584f9d8ec3fb943ad6e6ee","ApplicationFunction","Testing and verification","The testing and verification support feature group includes mechanisms for testing, which is a relevant step to ensure systems security, correctness and robustness:
• Automated testing – a feature for automated testing realisation (Khorram et al., 2020).
•  Integration with testing platforms – a possibility to integrate external testing platforms for UI, API and End-to-End automated testing (Khorram et al., 2020).
•  Requirements use in testing – platform functionality to map system requirements to the test cases (Khorram et al., 2020).
•  Testing environment – a feature that covers inbuilt testing workbench, model checking and validation tools (Ihirwe et al., 2020).
",""
"id-bd7de75b4add4fbb940fc5df49d7f8cb","ApplicationFunction","Visual development features","Visual development tools can include such features:
• Visual designer – visual modelling tool utilised to develop the software. Through it, all aspects of the software are developed by selecting, arranging, configuring and connecting components  (Lethbridge, 2021; Martins et al., 2020)
• Drag and drop approach – a feature that enables creating an app (for example, actions, connections, user interface elements) by grabbing and dragging the needed element to the needed position. Similarly “point and click” approach, instead of dragging, the developer points to the needed item and clicks on the required interface location (Sahay, Indamutsa, et al., 2020).
• Integrated development environment – a feature of a dedicated integrated development environment for developers for a complete development lifecycle (Martins et al., 2020).
• Forms – a feature that includes dashboards, custom forms, surveys, checklists and others to enhance the developed application’s user interface and user experience (Sahay, Indamutsa, et al., 2020).
• Advanced coding components – an occasionally present feature which allows achieving further customisation to build an extensive user interface and user experience, integrations, or custom algorithms. In the literature following languages have been mentioned: CSS, JavaScript, HTML, C#, Python, and Java (Bexiga et al., 2020; Bock & Frank, 2021a; Luo et al., 2021; Richardson & Rymer, 2016; Sahay, Indamutsa, et al., 2020)
",""
"id-95613b881abc451fa52358d265b19ff6","Goal","Automation","Automating steps reduces the need for employee intervention and thus reducing costs and improving quality ",""
"id-2da7c3457aef443cbe8c7b1210660cf7","Goal","Customer centric","Organisations should focus on addressing customer needs and requirements for products and services",""
"id-86f3666c85a04b2cb34486eaf8fc53d5","Goal","High performance teams","High-performance teams should be promoted to execute complex project goals successfully ",""
"id-047e53b3eaa544a7b696abb78d910053","Goal","Innovation","Innovation refers to companies’ initiatives to develop new and innovative products or services, employ specific processes or introduce standards ",""
"id-fce1baa9ec0347afb32ac4d0d4f82453","Goal","Integration","For fluent end-to-end business process execution, unrelated applications should be integrated ",""
"id-7128e7a737ac476ba5bf6ddf05ff415c","Goal","Leverage skills","Leveraging skills and knowledge helps increase operations’ effectiveness and efficiency. Furthermore, knowledge sharing helps with problem-solving and co-creation ",""
"id-feb72e5b43c040dd82e025a3ce5cd905","Goal","Low costs","Overall product and operational costs should be reduced, leading to product or service delivery at a lower cost and a greater profit margin ",""
"id-2de014fdbc9d4bb8abbade91958c06a5","Goal","Managed process","Processes should be managed to establish prerequisites for efficiency and performance increase ",""
"id-b532bd7a29bc42c69feadd42e9d880c2","Goal","Rapid adaptability","Organisations should be able to adapt to nowadays rapidly changing and uncertain environment ",""
"id-c831b710f6d34381aaa7872618ffe710","Goal","Reduction of cycle time","Faster availability of products or services to a customer should be enabled by reducing the time spent on development",""
"id-87166897c8c5416c968dd46287345437","Goal","Reduction of downtime","Downtime reduction is relevant to provide continuous product or service availability and gain success in various environments ",""
"id-b03cebcf355141ea912ef89d0dfeb7c1","Goal","Reliability of information ","Reliable information should be provided as it is critical for business execution ",""
"id-34cd7bc04d614da59ec16436541f1185","Goal","Up-skilled   workforce   /   decentralisation   of   authority","Employees should be empowered to make decisions without direct supervision or management approval, thus decreasing cycle time and improving process flexibility and effectiveness ",""
"id-d519cb9cb20e4698bc631794c922a103","Outcome","Accelerated development cycle","Low-code development allows full application delivery faster to face time constraints. Contributing aspect to this is the functionalities of the platforms to cover the whole development lifecycle and speed up the process through the reduction of manual coding, visual application development, drag-and-drop capabilities, reusability and automation.",""
"id-bb2ad5adbd224f45985e0ef08162b743","Outcome","Decreased costs","Cost saving is acquired by reducing the required time for coding and promoting IT and business collaboration using the available resources most effectively. The reduction is also obtained due to reduced maintenance costs and by limiting the need to hire new developers or outsource.",""
"id-d0c6814398754a639ef382ed790d23fc","Outcome","Improved collaboration among the development team and business","Low-code development platforms and principles enhance frequent collaboration between IT and business throughout the development lifecycle. Furthermore, it is easier to do as understandable visual models can be used, and feedback gathered. In such a way, the business side can directly contribute to the project and development team to identify the right work to do.",""
"id-ceb2872a55604c0ca726133f2454966f","Outcome","Increased involvement of citizen developers","1) Addresses the lack of developers as citizen developers gain the opportunity to implement applications themselves or with the lower involvement of IT professionals
2) Contributes to deliver applications faster
3) Delivers positive input towards reducing requirements misinterpretation as citizen developers come from business backgrounds so that they can define and fulfil them precisely ",""
"id-323864c2311f44dd9604a29eeb60cfe1","Outcome","Increased responsiveness to business and market demands","Business and market situation is constantly changing, usually with tight time and market window. Therefore, low-code development can be beneficial as it increases responsiveness to business and market demands due to its fast development characteristics and user feedback realising new opportunities and meeting requirements ",""
"id-fad1db80bd414b2d80f9946e1dfd4ed9","Outcome","Lowered maintenance effort","Predefined components expose fewer bugs and issues related to integration therefore maintenance effort is reduced. At the same time, it supports continuous requirements evolution to guarantee alignment between the developed app and business requirements. Therefore more attention can be paid to innovation.",""
"id-bce65b37c6fd40e1b759238b816a372f","Outcome","Promoted digital innovation","Low-code development promotes digital innovation (BE7) by empowering such cultural aspects as learning and experimentation, creativity, innovation and fast time-to-market delivery. Additionally, digital innovation is enhanced by increasing IT and business collaboration. Digital innovations allow to keep up with changing business and customer requirements by improving existing solutions or addressing new challenges to remain competitive.",""
"id-0c2df0bb8c654a73a2a4ef590dbeaea2","Outcome","Reduced shadow IT","Shadow IT appears when employees use systems, devices, and software without the approval of the IT department or create solutions outside the organisation’s architecture, adding complexity to the business. Low-code software development by providing tools administrated by the organisation to non-IT professionals reduces the risk of the rise of shadow IT (thus minimising risks related to security, data governance and others).",""
"id-bce0d801574f42789d87024a88de665a","Principle","Address the knowledge gap of citizen developers","The knowledge of software development best practices and platform features should be gained to adopt low-code development successfully and ensure the growth of citizen developers professionally.
",""
"id-3834b80fad6642e48182e72226ff2c5c","Principle","Comprehend and master the platform","Users of the platforms should be knowledgeable about utilising the features offered by the platform and release their full potential. A certain advantage here is for those with a programming background. Hence, comprehension of the platform will determine the development output.
Familiarisation with the platform should be enhanced for both citizen and professional developers. For the former groups, getting acquainted with the tool and work principles is necessary. The latter group might try to do extensive coding instead of applying inbuilt features due to an incomplete understanding of the platform.",""
"id-bd60eed1d61743148c1e8eda6751f848","Principle","Embrace platform automation capabilities","Low-code development platforms include essential mechanisms for automation that speed up the application delivery process. Developers should take advantage of these automation opportunities whenever possible, enhancing development speed",""
"id-8ae5dda3ace64c4887846be39bd44242","Principle","Embrace the test-and-learn culture for innovation","A culture that values experimentation through test-and-learn approaches to enhance innovation is essential for business on the quick market, business opportunity realisation, and digital transformation acceleration. An organisation can promote the delivery of these innovative ideas through low-code development, but ideas should come from business and IT collaboration first. Test-and-learn approach using Low-code methods is well-suited for fast innovation.",""
"id-e5059b0fa2084a38bfb0a9d9be4bbd21","Principle","Embrace visual application development and utilisation of predefined components, elements and templates","Low-code platforms enable the delivery of applications through visual development without or with minimal manual coding. Therefore, the successful use of visual application development, predefined components, elements and templates is a prerequisite for enhancing fast application delivery without compromising quality.",""
"id-e590f3735c324b949ddca8a5d5a2456a","Principle","Empower citizen developers and establish a fusion teams approach","Empower people (typically “business end-users”) with minimal or without software engineering experience and merge with experienced IT professionals. Such formation can be considered a “fusion team” – a group that merges business, analytics and technology professionals

",""
"id-014f7abdfd8f4d3787d42b0d9b01417b","Principle","Enhance reusability","Low-code development promotes the principle of reusability, and platforms include features for its support. Reusability enables to reuse of previously created artefacts. As a result, it enhances productivity, increases delivery speed and reduces maintenance effort.
Distributed architectures are common systems architecture, and reusability principles promote that in low-code development. In such a way, the development, deployment and maintenance effort is reduced ",""
"id-a4649fced51149aea06d19d8965d7b38","Principle","Establish and follow an iterative development lifecycle","Iterative and fast development methodologies with regular releases, rapid prototyping or minimum viable product creation and continuous stakeholder involvement in gathering feedback are suggestable as this way, acceleration of release time and adjustments can be gained. ",""
"id-abb8269c2ca2484885e4248aa4eb8de0","Principle","Establish governance","Citizen developers might neglect security and other IT governance aspects while providing fast application delivery, and proactive actions are required to prevent these concerns. Otherwise, it can result in various threats.
Initially, developer teams should be given freedom for the first projects. However, according to, some basic principles, for example, information security, compliance, control and internal interaction, should be provided. Later, conventions should be established.",""
"id-ebb9f92a203b42669099818960cde9ea","Principle","Extend the functionality with additional customisation when required","Various platforms allow the extension of their user interface, flows, data services, connectors and other functionality using additional customisation features. Additional customisation features enable a higher degree of personalisation and implementation of advanced requirements. However, developers should be careful with the implementation of advanced customisation, and it should be only applied when required and when it delivers additional value, as every additional customisation takes additional development time and increases the complexity of maintenance. ",""
"id-a4a74f5df6194a858b1a03b5078f50e1","Principle","Promote IT-business collaboration","For effective responsiveness and feedback gathering, barriers to business user involvement in low-code development should be eliminated. The promotion of collaboration improves requirements understanding, and implementation accuracy as the path of requirements transfer is reduced.
1) Both sides should be responsive, working within low-code development. Together fast translation of business requirements and also their refinement into a functional application can be achieved 
2) It is necessary to receive feedback faster and regularly. Feedback gathering and refinement should be done in a continuous manner through quick iterations 
It is a benefit for both – developers can spend resources delivering needed functionalities, and the business receives what they exactly require",""
"id-6f6a75b471694dc2b01970ea4b63f3ec","Principle","Select the right low-code platform","Low-code development is a tool-based approach. As stated by, low-code code development platforms can help any enterprise, especially those with limited IT resources and budget, scale organisation at optimum cost and quickly deliver products with rich features. Therefore, the selection of a platform should be performed thoroughly. Otherwise, time and resources are wasted.",""
"id-3dd95624973e4e4daa01be0a2e0c0013","Principle","Support changing requirements","For organisations, the ability to react to changing markets and business situations is essential to retain customers and fulfil business needs. Therefore low-code development through agility is able to deliver it, and developers should be open to supporting changing requirements ",""
"id-e88312a3fc99451d95eadd6aa10c885c","Junction","Junction","",""