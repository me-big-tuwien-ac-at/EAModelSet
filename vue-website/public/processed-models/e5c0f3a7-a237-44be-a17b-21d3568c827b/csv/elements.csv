"ID","Type","Name","Documentation","Specialization"
"e5c0f3a7-a237-44be-a17b-21d3568c827b","ArchimateModel","OpenSource Standard","",""
"c1c42b44-4801-4435-82d2-c74248616209","BusinessActor","Business Actor","",""
"83db111b-c8e9-46de-95d5-560b3018f125","BusinessActor","Government of Canada Enterprise ARB","",""
"53236950-e7f2-405f-8c76-bf00674700d4","BusinessActor","OGD Architecture Review Boards (ARB)","",""
"e4935a5c-ac5b-4848-b819-5900826b2fa4","BusinessEvent","Developing a solution","",""
"5ef71001-343b-4c22-b079-a52d69110da1","BusinessInterface","Architecture Review Boards","",""
"d9421c96-81ad-42b0-a7e1-ee2e38cf0d0e","BusinessObject","Assessment framework ","",""
"99b660c4-13fc-4d3a-a9a0-7741e20f5bf5","BusinessObject","Business Requirement","",""
"e57ffed9-f55e-4295-b2a1-751937a88242","BusinessObject","Concept Case","",""
"8c9e1393-3e08-4fa2-ad38-fc5972f2de42","BusinessObject","Contribution to Open Source Software","https://canada-ca.github.io/open-source-logiciel-libre/en/guides/contributing-to-open-source-software.html",""
"81563f5e-aaa9-47d8-b36b-9dcfea93bcb3","BusinessObject","Open Source Standards Document","https://canada-ca.github.io/open-source-logiciel-libre/en/open-source-standards.html",""
"96a27c1f-cb4c-43f7-8665-461b2788cac2","BusinessObject","Prior to Starting","https://canada-ca.github.io/open-source-logiciel-libre/en/guides/prior-to-starting.html",""
"7225ef56-9c6e-4f47-a262-bce4a28136d6","BusinessObject","Publication of Open Source Code","https://canada-ca.github.io/open-source-logiciel-libre/en/guides/publishing-open-source-code.html",""
"da2ac53e-f72e-462f-8acb-f18c750523b2","BusinessObject","Use of Open Source Software","https://canada-ca.github.io/open-source-logiciel-libre/en/guides/using-open-source-software.html",""
"283315dd-fa65-4f6f-b0bb-013b0599409f","BusinessProcess","Actively and Fairly Consider Open Source Software","Be aware that open source software is not completely free, so take into account the total cost of ownership (TCO) of migrating, including exit, transition, and support costs.

Be Aware of Open Core
A solution that is built with open source software but requires the use of closed-source components should not be considered open source software for the purpose of this guide. The open core development model is where vendors open only portions of their software and then surround the remainder with closed-source offerings, as well as the model where a user such as Canada augments already licenced proprietary software with open source software. The “free” open source software versions often referred to as “community” editions are recommended first. See Verify Open Source Software Ownership or Licence.

Selecting Open Source Software First
The mandatory procedures for enterprise architecture assessment ( see annex C of the Directive on Management of Information Technology ) require application architecture – for both new technology and upgrade/migration of existing solutions – to prioritize the use of open source software as well as open standards. Doing so maximizes the substitutability and interoperability of software components and opens the door to creating highly flexible solutions. It also helps mitigate the significant risks which arise from lock-in and similar issues.

Sometimes an open source solution meets most user needs but would require additional investment to develop missing functionality (see Guide for Contributing to Open Source Software). In these cases, this investment must be considered by weighing the total cost of ownership against those of other candidate solutions.

Evaluation
The same factors applicable to an evaluation of the feature set and maturity of closed-source software also apply to open source software. Additional criteria should be assessed when evaluating open source software:

User Community
A strong user community involved in a project provides people to answer questions, test the software, report bugs, suggest improvements and drive forward overall interest in the software. Look at the software’s public code repository and check the project popularity by looking at the number of likes and followers. Check how active the project responds to users by looking at issues and the time between replies.

Developer Community
A strong developer community with a history of releases and continued involvement tends to demonstrate that fixes and improvements to the software will continue into the future. Look at who are the core developers and who is supporting the project and community, such as a non-profit Foundation. Look at when the project got started, the pace of releases and responses to requests to merge code from contributors.

Documentation
User documentation provides important information to help users install software and use its features. Technical documentation provides requirements and instructions for installation, development, deployment and configuration of the software.

Security Assessments
Although OSS code is auditable, this does not necessarily mean it is secure. The quality of the code and the typical response time for patching security-related flaws help indicate the security maturity level of the software.

As per any software, you should maintain best practices and have a process in place to list all packages in use as well as their version in order to patch them promptly.",""
"886bb32d-dc5a-42cb-be61-dc03d9231911","BusinessProcess","Evaluate Support Options","Use of open source software introduces a different model based on support services rather than obtaining software licences.

The two major support models for open source software are self-support, where the department or agency’s internal IT team is responsible for maintenance and interacting with the community, or professional support.

Internal
Using a self-support model requires that the responsible teams:

Have a proper process in place to manage the evaluation and the introduction of open source software in the organization.
Maintain and track thorough lists of all software used how and by whom.
Ensure updates are applied in a timely fashion.
User and developer community should be leveraged for general support questions as well as reporting bugs, creating feature requests and code contributions.

When using software components for development purposes, powerful tools and services can be leveraged by IT teams to automate, facilitate and speed up the identification of these components, including open source software. These tools can provide scanning capabilities for known security vulnerabilities as well as legal compliance.

See Guide for Contributing to Open Source Software.

Professional Services
It is possible to enter in contract with a company for professional services to provide maintenance, updates, warranty and liability for open source software.

Another scenario that may become recurrent would be choosing an open source software and using the community version and later down the road going for tender for professional support and maintenance.

When custom development requires the use of contracted developers, ensure that the proper rights to the source code are obtained to release as open source in accordance with the Guide for Publishing Open Source Code.",""
"cdc82eb9-e43b-469e-b5a9-32749b0e4d72","BusinessProcess","Register to Open Resource Exchange ","Departments are encouraged to add all open source software your department or agency is using to the Open Source Software section on the Open Resource Exchange.

The goal of this platform is to help find other departments that have successfully used open source software as part of the production environment and create ties with the open source communities around them.

This is also in line with the Digital Standard: Work in the Open by default.

Instructions on how to update the data can be found on GitHub.",""
"4772186d-4a57-46f3-ba7b-c4ab4ac0b0b7","BusinessProcess","Review Architecture","",""
"a22773d4-cb2e-4880-80dc-6305d68daac5","BusinessProcess","Use Open Source Software With Modifications ","Using open source software with modifications is not generally considered distribution and does not require that code be shared back.

Modifications made to open source software should still be shared with the community to help ensure sustainability of the solution. See Guide for Contributing to Open Source Software.

For cases where sharing modifications is mandatory, see Strong Reciprocal Implications.

Don’t Fork Open Source Software
Where possible, use open source software without modification or contribute them back.

Use configuration and customize the software with modules, plugins or extensions and make those available to the community. See Guide for Publishing Open Source Code.

It’s easy to copy (fork) open source software and start making changes to the source code. If a literal fork is created, which means taking a copy of the source code and maintaining your own version independently from the original project, be aware it can make future updates and security patches hard to implement. The development team that made the changes will be responsible for maintaining those changes indefinitely unless they are contributed to the upstream version, which is the original project from which the source code was taken.

To make changes to open source software, engage with the community and submit changes upstream to ensure that they are supported by future updates. See Guide for Contributing to Open Source Software.

Note: the term “fork” in the literal sense may be confused with the process of forking (cloning) projects on GitHub, GitLab and Bitbucket, which is critical to submit changes back to the original project.

Strong Reciprocal Implications
Strong reciprocal licences consider that software accessed through a network (like the Internet) is distribution and the modified source code must be made available to users. See Guides for Publishing Open Source Code and Contributing to Open Source Software.

Strong Reciprocal Licences
The Open Source Initiative approved licenses and the Free Software Foundation free software licences contain the following strong reciprocal licences.

GNU Affero General Public License (AGPL)
European Union Public License (EUPL)
Open Software License (OSL)",""
"e4276857-5fd3-4d79-bc95-39196e50a5d6","BusinessProcess","Use Open Source Software Without Modification ","Using open source software without modification does not require that code be shared back.

Configuration of software, even through configuration files, are not considered modifications.

This is also true for combinations of open source software to build a solution or open source software used for development and deployment. See examples below:

Standalone Combination of components Development and deployment
Web browser, Productivity suite, Operating system and utilities (Window manager, Desktop environment, Text editor, Console..), .. Application and plugins with database and web server Custom development using open source software programming languages and dependencies, HTTP server, Database management system, Container platform
For development or when writing source code, see Guide for Publishing Open Source Code.",""
"737a343d-0f2f-435b-a407-94c79d4d8b6f","BusinessProcess","Verify Open Source Software Ownership or Licence","Whenever the Crown is contemplating acquiring software under an open source licence, departments should review the terms and conditions to validate if they can accept and comply with them given their particular business context.

The software is usually provided ‘as-is’ meaning the community will not accept liability or provide any financial compensation to the Crown for service interruption, loss of data, or loss of confidentiality. As such, you should consider the software obtained under an OSS licence with the same responsibility lenses as if you had written it.

All software licensed under an Open Source Initiative approved license or a Free Software Foundation free software licence is considered open source software and, where its use is possible in accordance with this Guide, can be used by the GC without modifications.

However if the software needs to be modified, the following considerations should be discussed with the appropriate stakeholders (i.e end users, project managers, legal services) and applied to help identify what licences terms and conditions the department is willing to approve.

Are there any reasons that would prevent the release of the modified source code?
No: Subject to the considerations above, you can accept any OSI approved licence or FSF free software licence. See Use Open Source Software With Modifications.
Yes: See 2.
Is the modified application going to be used as a web application?
Yes: Subject to the considerations above, you can accept any OSI approved licence or FSF free software licence except strong reciprocal licences. See Strong Reciprocal Licences.
No: See 3.
Is the modified application going to be distributed externally, outside the GC, either the source code or the binary?
No: Subject to the considerations above, you can accept any OSI approved licence or FSF free software licence.
Yes: Subject to the considerations above, you can accept any OSI approved licence or FSF free software licence except Reciprocal Licences. Use only Permissive Licences.
Additional consultation with legal and engineering teams should be done for scenarios where the open source software is used as a component of custom development (e.g.: dynamic vs static linking, etc.) to ensure licence compatibility.

Popular and Widely Used Licences
The following are lists of licences categorized by permissive and reciprocal. For full list refer to Open Source Initiative (OSI) and Free Software Foundation (FSF) Websites.

Permissive Licences
Apache License
BSD license
ISC License
MIT license
Reciprocal Licences
Eclipse Public License (EPL)
European Union Public License (EUPL)
GNU General Public Licenses (GPL, LGPL and AGPL)
Mozilla Public License (MPL)
Open Software License (OSL)",""
"c95fff0d-8163-45f8-b9c3-3f21f075017e","BusinessRole","Architects","",""
"5a824ee9-f715-4b48-be12-e531c7978ed5","BusinessService","Reviewing Digital Initiatives","",""
"ea6a4b15-1570-4b7e-9a09-9e2590a0f9d3","Assessment","Increased use of Open Source Software in the GC","The Government of Canada (GC) has been using Open Source Software (OSS) as part of its technology ecosystem for years, and is increasingly relying on it for successful service delivery.",""
"6018a5a2-95d0-4aa8-a7bb-de3dd027a2f2","Constraint","Ability to use for any Purpose ","Business Requirements may be set such that Software can be used for any purpose, having no restrictions in how it can be used, or allow others to use the Software. OSS terms are most likely to comply with this requirement.",""
"f6b0e8c6-68e0-411c-952e-1cc55d324b7a","Constraint","Avoid Open Core","A solution that is built with open source software but requires the use of closed-source components should not be considered open source software for the purpose of this guide. The open core development model is where vendors open only portions of their software and then surround the remainder with closed-source offerings, as well as the model where a user such as Canada augments already licenced proprietary software with open source software. The “free” open source software versions often referred to as “community” editions are recommended first.",""
"cc248455-aedd-49fb-aafa-9702c5a57cb5","Constraint","Business Requirements","A Business Requirement is different from, and larger than, a digital project’s Functional Requirements or Technical Requirements alone. A Functional Requirement defines a particular function of software in order to obtain a result, and addresses a more specific working level need. A Technical Requirement defines a capability or the attributes needed to work with other software, and expresses the larger architectural decision to support the project.

The Business Requirement includes consideration of both the Functional and Technical Requirements, but also other overall elements, in order to address the nature, purpose and needs of the digital project at a high level, As a result, the Business Requirement will dictate the path for software acquisition and development, and Technical and Functional Requirements cannot be used alone as justification for the purposes of an evaluation of the benefits of Open Source Software or Proprietary Software.",""
"036c7ca4-0d0e-408f-8c70-36a0b46ddab1","Constraint","Complies with Digital Principles","compatible with principles of transparency, accountability, and procedural fairness, and within the structures of existing policy and law.",""
"f63e8be0-db09-4e5f-b9c9-379663a9cda7","Constraint","Concept Case","A Concept Case identifies the key information on which a potential future digital project should be predicated, and should be completed before the Business Requirement is formed.",""
"3fd0d0fd-5183-48e0-aaa7-d746e2656e5d","Constraint","Constraints","",""
"0319c913-8604-445b-9807-6df5c57ca089","Constraint","Evaluation","",""
"368de115-887b-49f2-824c-2bd6a63f8b78","Constraint","Flexibility of the License ","Open Source Software licenses can provide more flexibility than a proprietary license for a digital project’s deliverables.

Where the Business Requirement would benefit from the reuse of Software, the GC may acquire Software such that it may be used in subsequent projects in the GC. A Proprietary Software licensor can grant such right of re-use upon request, but by its nature, all Open Source Software is reusable and therefore compliant with this request by default.",""
"f5f9ca5d-8a35-4971-af65-00ced73617c6","Constraint","Selecting Open Source Software First ","",""
"1acdf08d-97f7-49ce-913f-00ae661bbd22","Constraint","The Ability to Distribute the Software ","Business requirements may be set such that the Software be available for distribution to anyone of its choice to ensure that other Crown institutions do not need to become customers of the original vendor in order to access and use services provided by another agency. For example, the federal Crown may wish to be able to provide the Software at no extra costs to provincial or municipal institutions.",""
"3c2e60ea-a922-46c7-9e10-574ee84d97a5","Constraint","The Ability to Evaluate the Code ","The GC may set its requirements such that the source code be available for audit by a third party to identify quality, functionality and security of the Software.",""
"342a4cfc-d73e-4fd9-95ce-af63196faf63","Constraint","The Alignment with Open Government","In addition the GC may set its requirements such that the source code be provided to the public to enable greater transparency and align with Open Government principles of the D9.",""
"017ba257-a665-4086-93b9-383a43d9abf9","Constraint","The Use of International or Canadian Standards ","Business Requirements may dictate that the underlying application should conform to International or Canadian Standards, such as but not limited to requirement that the official languages requiring Software be available in both official languages.",""
"3026e0e6-4bfc-40b6-b719-6f09ee3e69a0","Constraint","Use open standards and open software first","Where Appropriate and Where Possible are defined as all items that are not exempt due to the following:

The Source Code is not owned exclusively by the Crown and is not already open-source.
The Source Code is protected
In order for source code to potentially be deemed protected, it would have to contain any of the following information:

Information that is deemed Classified
Information obtained in confidence
Information about federal-provincial affairs
Information about international affairs and defence
Information about law enforcement and investigations
Information about the safety of individuals
Information about the economic interests of Canada
Personal information
Third party information
Advice about certain aspects of operations of government
Information about testing procedures, tests, and audits
Information that is subject to solicitor-client privilege
Information that is subject to statutory prohibitions
Certain types of information held by the Canadian Broadcasting Corporation and Atomic Energy of Canada Limited
Confidences of the Queen’s Privy Council for Canada
It is highly unlikely that developers would intentionally include such information in their source code. As a result, source code is considered unclassified unless the developer has included, inadvertently or otherwise, information that falls under the items listed above.",""
"419b8650-e155-4386-9fbe-8c3659a4f88d","Driver","Drivers","",""
"9f159c5b-456c-40b2-9485-41c03d8351bd","Driver","Mandatory Procedures for Concept Cases for Digital Projects","The Directive on Policy on the Planning and Management of Investments, Appendix C provides Mandatory Procedures for Concept Cases for Digital Projects. While the Directive only applies to projects over a certain dollar threshold, it is important to note that the vast majority of Agile Project Management Frameworks begin with an artifact that matches a Concept Case such as a Project Vision or Project Objectives",""
"fe12ac81-58f9-485d-9ebe-719668662807","Driver","Mandatory Procedures for Enterprise Architecture Assessment","",""
"b066b6d6-407e-431d-b30d-ad3e162a64f7","Driver","Use open standards and solutions ","Commitment to become a digital government",""
"9c534ce2-d566-4e02-86ac-0c0d77d277a5","Goal","Contribute to OSS","GC will endeavour to contribute OSS back to external projects",""
"17c23ce9-1990-4651-955a-0aa998dc5ca6","Goal","Ensure departmental alignment","ensure the GC acts as a single enterprise and to ensure departmental alignment with the GC digital direction",""
"c5860ba7-c7cf-440c-bb42-7a7f2ced7142","Goal","Ensure the GC acts as a single enterprise","",""
"861db336-50f4-462e-8373-0702403a36c7","Goal","Goals","",""
"2ddf5826-f4fe-4336-ae50-961382a96bb3","Goal","Release source code under Open Source Software licences","release its own source code under Open Source Software licences",""
"5f14361d-d299-4f2a-8240-65ee2f1b1cb4","Outcome","Develop an Open Source Software Standard ","",""
"1f0e4acf-7170-416e-b5ca-3fa9babc918d","Principle","Directive on Management of Information Technology","",""
"194f459a-11e5-4604-b253-3bf2f782972d","Principle","Directive on Policy on the Planning and Management of Investments","",""
"6ddf8773-898b-43b3-b63a-1453bf2a1fb9","Principle","Government of Canada Digital Standards","",""
"329da8ba-3fa9-422b-a1a2-e24d4cf9594e","Principle","Open Source Standard","",""
"518cc30c-f7e3-478b-b6b6-8bd16eae7d55","Principle","Principles","",""
"ed7386c0-c47c-4ac1-8567-301953828b6e","Principle","Where Appropriate and Where Possible ","Where Appropriate and Where Possible are defined as all items that are not exempt due to the following:

The Source Code is not owned exclusively by the Crown and is not already open-source.
The Source Code is protected
In order for source code to potentially be deemed protected, it would have to contain any of the following information:

Information that is deemed Classified
Information obtained in confidence
Information about federal-provincial affairs
Information about international affairs and defence
Information about law enforcement and investigations
Information about the safety of individuals
Information about the economic interests of Canada
Personal information
Third party information
Advice about certain aspects of operations of government
Information about testing procedures, tests, and audits
Information that is subject to solicitor-client privilege
Information that is subject to statutory prohibitions
Certain types of information held by the Canadian Broadcasting Corporation and Atomic Energy of Canada Limited
Confidences of the Queen’s Privy Council for Canada
It is highly unlikely that developers would intentionally include such information in their source code. As a result, source code is considered unclassified unless the developer has included, inadvertently or otherwise, information that falls under the items listed above.

Where feasible, this information should be removed from the source code to increase the ability for code to be shared.",""
"fb4a8d82-7e4b-418f-a7c5-3f0a17543e98","Requirement","A strong developer community","A strong developer community with a history of releases and continued involvement tends to demonstrate that fixes and improvements to the software will continue into the future. Look at who are the core developers and who is supporting the project and community, such as a non-profit Foundation. Look at when the project got started, the pace of releases and responses to requests to merge code from contributors.",""
"20a94f8c-df3b-4981-b12c-7415ceb792f2","Requirement","A strong user community","A strong user community involved in a project provides people to answer questions, test the software, report bugs, suggest improvements and drive forward overall interest in the software. Look at the software’s public code repository and check the project popularity by looking at the number of likes and followers. Check how active the project responds to users by looking at issues and the time between replies.",""
"85fede06-312f-43af-a1f4-f440618835c8","Requirement","C.2.3.8.1 Use open standards and open source software first","C.2.3.8.1Where possible, use open standards and open source software first",""
"a2e46ff4-4826-4eaa-b421-dd74ac50876b","Requirement","D.2.2.1.4.2 Leveraging open source tools and frameworks to implement the API where possible.","",""
"13502aa7-ebe0-4bf8-9178-56c14dc12624","Requirement","Define Concept Case & Business Requirement First","Prior to any form of development or acquisition, Business Owners should define both a Concept Case and a Business Requirement for any digital project.",""
"b7140d49-47a5-48c8-acf5-fab1b4f0606e","Requirement","Evaluate Requirements","Technical and Functional requirements cannot be used as justification for the purpose of evaluation of Open Source Software to proprietary Software, only Business requirements.

The following are examples of elements that can be taken into consideration in the creation of business requirements, but it's important to remember that procurement rules may require that business requirements permit the bidding of both proprietary and Open Source Software.",""
"c1565724-3a6d-4680-8baa-96275b064c44","Requirement","Leverage open standards and embrace leading practices, including the use of open source software where appropriate","",""
"57464700-47c0-4fb6-9004-ef190ca45e67","Requirement","Requirements","",""
"27c03f66-6d6f-4910-93a5-b6049e12c466","Requirement","Security Assessments","Although OSS code is auditable, this does not necessarily mean it is secure. The quality of the code and the typical response time for patching security-related flaws help indicate the security maturity level of the software.

As per any software, you should maintain best practices and have a process in place to list all packages in use as well as their version in order to patch them promptly.",""
"f5455c03-edfc-4ea8-ac05-486e3b61fb76","Requirement","User documentation","User documentation provides important information to help users install software and use its features. Technical documentation provides requirements and instructions for installation, development, deployment and configuration of the software.",""
"a48b242e-9cb7-4446-9294-cb013bd88a1f","Stakeholder","Departments and Agencies","",""
"072d50c3-37b7-437e-8b81-7833042a23c3","Stakeholder","Government of Canada (GC)","",""
"75138264-69dd-414d-b141-a64a53c7fa93","Stakeholder","Public Servants","",""
"dbef24a1-597a-433b-aa0c-36babd20fb70","Stakeholder","Stakeholder","",""
"5a364d99-82f5-4162-9f5f-ff3e59542af5","Value","Develop standards","",""
"20a6f1f3-a402-4f0b-8660-0097af0f1a1a","Grouping","Architecture Review","",""
"21d69e6b-d687-432f-8405-56e7cbb976db","Grouping","Selecting Opensource Software","",""
"ef5e72e3-8631-4434-8eff-510e99981018","Junction","Junction","",""
"55b03488-b57b-4ead-afd7-573dde7f7032","Junction","Junction","",""